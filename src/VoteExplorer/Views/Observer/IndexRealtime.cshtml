@model VoteExplorer.Models.MainVM
@{
    if (ViewBag.UserType == "IVY")
    {
        Layout = "_IVYLayout";
    }
    else
    {
        Layout = "_Layout";
    }

    string winnerLeader = "WINNER";
}
<div id="window">
    <strong><span id="dataretrievalStatus"></span></strong>
    <p>
        <div style="float:left;width:300px;" id="totalProgressBarResults"></div><div style="float:left;"> &nbsp; <span class="loadingStatusResults">0%</span></div>
    </p>

</div>
<div class="right_col" role="main">
    <div class="">
        <div class="page-title">
            <div class="title_left">
                <h3>
                    VOTE RESULTS
                    @if (ViewBag.UserType == "IVY")
                    {
                        <select id="ddlMeetingList" style="width:800px;">
                            <option>Broadridge (Annual General Meeting) - June 1, 2016</option>
                            <option>Exxon (Annual General Meeting) - June 1, 2016</option>
                            <option>Google (Special Meeting) - June 1, 2016</option>
                            <option>IBM (Annual General Meeting) - June 1, 2016</option>
                            <option>Microsoft (Annual General Meeting) - June 1, 2016</option>
                            <option>Nasdaq (Annual General Meeting) - June 1, 2016</option>
                            <option>Yahoo! (Special Meeting) - June 1, 2016</option>
                        </select>
                    }
                    else
                    {

                        <small>@Model.voteTokenName</small>

                    }
                </h3>
                
            </div>
            <div class="title_right">
                <div class="col-md-5 col-sm-5 col-xs-12 form-group top_search">
                    <div class="input-group">
                        <!-- <input type="text" class="form-control" placeholder="Click here to attend the AGM"> -->
                    </div>
                </div>
            </div>
        </div>
        <div class="clearfix"></div>

        <div class="demo-section k-content">
            <div id="example">
                <table id="dgCompletedProposals">
                    <thead>
                        <tr>
                            <th style="visibility:hidden;display:none;">
                            </th>
                            <th>
                            </th>
                            <th>
                            </th>
                            <th>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="3"></td>
                        </tr>
                            <!-- Start of StatCounter Code for Default Guide -->
                            <script type="text/javascript">
                            var sc_project=11422069; 
                            var sc_invisible=1; 
                            var sc_security="e5b87542"; 
                            var sc_https=1; 
                            var scJsHost = (("https:" == document.location.protocol) ?
                            "https://secure." : "http://www.");
                            document.write("<sc"+"ript type='text/javascript' src='" +
                            scJsHost+
                            "statcounter.com/counter/counter.js'></"+"script>");
                            </script>
                            <noscript><div class="statcounter"><a title="web analytics"
                            href="http://statcounter.com/" target="_blank"><img
                            class="statcounter"
                            src="//c.statcounter.com/11422069/0/e5b87542/1/" alt="web
                            analytics"></a></div></noscript>
                            <!-- End of StatCounter Code for Default Guide -->
                    </tbody>
                </table>
                <script id="rowTemplate" type="text/x-kendo-tmpl">
                    <tr style="border-width:1px; border:solid" data-uid="#: quid #">
                        <td style="visibility:hidden;display:none;">
                            #: quid #|
                        </td>
                        <td class="details">
                            #: questionIndex #: #: text #
                        </td>
                        <td class="voteresult">
                            <span>
                                VOTE @winnerLeader: #: winningPercentage #
                            </span>
                            <div class="box">
                                #: winningAnswer #
                            </div>
                            <span>
                                YOUR PROXY VOTED: #: proxyChoice #
                            </span>
                        </td>
                        <td class="employeeID">
                            <div id="answerPieChart_#: quid #" style="width: 150px; height: 150px;"></div>
                        </td>
                    </tr>
                </script>
                <script id="altRowTemplate" type="text/x-kendo-tmpl">
                    <tr class="k-alt" data-uid="#: quid #">
                        <td style="visibility:hidden;display:none;">
                            #: quid #|

                        </td>
                        <td class="details">
                            #: questionIndex #: #: text #
                        </td>
                        <td class="voteresult">
                            <span>
                                VOTE @winnerLeader: #: winningPercentage #
                            </span>
                            <div class="box">
                                #: winningAnswer #
                            </div>
                            <span>
                                YOUR PROXY VOTED: #: proxyChoice #
                            </span>
                        </td>
                        <td class="employeeID">
                            <div id="answerPieChart_#: quid #" style="width: 150px; height: 150px;"></div>
                        </td>
                    </tr>
                </script>
                <script>
                    var accountsResults;
                    var accountResults;

                    var voteSessionABIResults;
                    var voteSessionContractResults;
                    var deployedVotingSessionResults;
                    var totalTokenVoters;
                    var contractNumberResults = "@Model.contractNumber";
                    var votes = [];
                    var myWindow;
                    var pb;
                    var refreshDataFromBlockchain = "@Model.refreshDataFromBlockchain";

                    function pageLoad() {
                        if (refreshDataFromBlockchain == "true") {
                            $("#totalProgressBarResults").kendoProgressBar({
                                orientation: "horizontal",
                                showStatus: false,
                                animation: false,
                                change: function (e) {
                                    $(".loadingStatusResults").text(e.value + "%");
                                }
                            });
                            $("#dataretrievalStatus").text("Data Is Currently Being Retreived From the Blockchain...");
                            pb = $("#totalProgressBarResults").data("kendoProgressBar");
                            pb.value(0);

                            //myWindow.data("kendoDialog").open();
                            myWindow = $("#window");

                            myWindow.kendoWindow({
                                width: "370px",
                                title: "Please Wait",
                                closable: false,
                                modal: true,
                                visible: false
                            }).data("kendoWindow").center().open();

                            var self = this;
                            web3.eth.getAccounts(function (err, accs) {
                                if (err != null) {
                                    alert("There was an error fetching your accounts.");
                                    return;
                                }
                                if (accs.length == 0) {
                                    alert("Couldn't get any accounts! Make sure your Ethereum client is configured correctly.");
                                    return;
                                }

                                accountsResults = accs;
                                accountResults = accountsResults[0];
                                web3.eth.defaultAccount = accountResults;
                                voteSessionABIResults = "[ { \"constant\": false, \"inputs\": [ { \"name\": \"voteToken\", \"type\": \"address\" } ], \"name\": \"setVoteTokenAddress\", \"outputs\": [ { \"name\": \"setTokenId\", \"type\": \"bool\" } ], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"votedAddress\", \"type\": \"address\" }, { \"name\": \"voteSessionId\", \"type\": \"string\" }, { \"name\": \"transactionId\", \"type\": \"string\" } ], \"name\": \"setVoteTransactionId\", \"outputs\": [ { \"name\": \"Result\", \"type\": \"bool\" } ], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"indexVoter\", \"type\": \"uint256\" }, { \"name\": \"voterAddress\", \"type\": \"address\" } ], \"name\": \"getVoteAnswersByAddress\", \"outputs\": [ { \"name\": \"indexVoter1\", \"type\": \"uint256\" }, { \"name\": \"voter\", \"type\": \"address\" }, { \"name\": \"voteSessionId\", \"type\": \"string\" }, { \"name\": \"voteAnswers\", \"type\": \"string\" }, { \"name\": \"blockNumber\", \"type\": \"uint256\" }, { \"name\": \"balance\", \"type\": \"uint256\" } ], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"voterIndex\", \"type\": \"uint256\" } ], \"name\": \"getVoteAnswersByIndex\", \"outputs\": [ { \"name\": \"indexVoter1\", \"type\": \"uint256\" }, { \"name\": \"voter\", \"type\": \"address\" }, { \"name\": \"voteSessionId\", \"type\": \"string\" }, { \"name\": \"voteAnswers\", \"type\": \"string\" }, { \"name\": \"blockNumber\", \"type\": \"uint256\" }, { \"name\": \"balance\", \"type\": \"uint256\" } ], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [], \"name\": \"totalVoters\", \"outputs\": [ { \"name\": \"totalVoters\", \"type\": \"uint256\" } ], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [], \"name\": \"getLastVoteSessionId\", \"outputs\": [ { \"name\": \"voteSessionId1\", \"type\": \"string\" } ], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [], \"name\": \"getVoteAnswers\", \"outputs\": [ { \"name\": \"indexVoter1\", \"type\": \"uint256\" }, { \"name\": \"voter\", \"type\": \"address\" }, { \"name\": \"voteSessionId\", \"type\": \"string\" }, { \"name\": \"voteAnswers\", \"type\": \"string\" }, { \"name\": \"blockNumber\", \"type\": \"uint256\" }, { \"name\": \"balance\", \"type\": \"uint256\" } ], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"questionIndex\", \"type\": \"uint256\" } ], \"name\": \"getQuestionByIndex\", \"outputs\": [ { \"name\": \"questionIndex1\", \"type\": \"uint256\" }, { \"name\": \"questionId\", \"type\": \"string\" }, { \"name\": \"questionTextRows\", \"type\": \"uint256\" }, { \"name\": \"boardRecommendation\", \"type\": \"string\" }, { \"name\": \"isActive\", \"type\": \"uint256\" } ], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"questionId\", \"type\": \"string\" }, { \"name\": \"questionTextRows\", \"type\": \"uint256\" }, { \"name\": \"questionText\", \"type\": \"bytes32\" }, { \"name\": \"boardRecommendation\", \"type\": \"string\" }, { \"name\": \"isActive\", \"type\": \"uint256\" } ], \"name\": \"insertUpdateQuestion\", \"outputs\": [ { \"name\": \"insertupdate\", \"type\": \"bool\" } ], \"payable\": false, \"type\": \"function\" }, { \"constant\": true, \"inputs\": [ { \"name\": \"x\", \"type\": \"bytes32\" } ], \"name\": \"bytes32ToString\", \"outputs\": [ { \"name\": \"\", \"type\": \"string\" } ], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"questionId\", \"type\": \"string\" }, { \"name\": \"questionTextRow\", \"type\": \"uint256\" } ], \"name\": \"getQuestionTextByRow\", \"outputs\": [ { \"name\": \"questionid\", \"type\": \"string\" }, { \"name\": \"row\", \"type\": \"uint256\" }, { \"name\": \"textLine\", \"type\": \"bytes32\" } ], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"questionId\", \"type\": \"string\" }, { \"name\": \"questionTextRow\", \"type\": \"uint256\" }, { \"name\": \"questionText\", \"type\": \"bytes32\" } ], \"name\": \"addQuestionTextRow\", \"outputs\": [ { \"name\": \"success\", \"type\": \"bool\" } ], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [], \"name\": \"totalQuestions\", \"outputs\": [ { \"name\": \"totalQuestions\", \"type\": \"uint256\" } ], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"source\", \"type\": \"string\" } ], \"name\": \"stringToBytes32\", \"outputs\": [ { \"name\": \"result\", \"type\": \"bytes32\" } ], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [], \"name\": \"getVoteTokenAddress\", \"outputs\": [ { \"name\": \"VoteToken\", \"type\": \"address\" } ], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [ { \"name\": \"voteSessionId\", \"type\": \"string\" }, { \"name\": \"selectedAnswers\", \"type\": \"string\" } ], \"name\": \"vote\", \"outputs\": [ { \"name\": \"Result\", \"type\": \"bool\" } ], \"payable\": false, \"type\": \"function\" }, { \"inputs\": [], \"payable\": false, \"type\": \"constructor\" } ]";
                                voteSessionContractResults = web3.eth.contract(JSON.parse(voteSessionABIResults));
                                deployedVotingSessionResults = voteSessionContractResults.at(contractNumberResults);
                                deployedVotingSessionResults.totalVoters.call(function (error, totalVoters) {
                                    totalTokenVoters = totalVoters;
                                    console.log("totalVoters = " + totalVoters);
                                    votes = [];
                                    for (var x = 0; x < totalVoters; x++) {
                                        deployedVotingSessionResults.getVoteAnswersByIndex.call(x, function (error, voteAnswers) {
                                            console.log("answers = " + voteAnswers);
                                            var vote = {
                                                "index": voteAnswers[0],
                                                "senderAddress": voteAnswers[1],
                                                "sessionId": voteAnswers[2],
                                                "voteSelections": voteAnswers[3],
                                                "blockNumber": voteAnswers[4],
                                                "balance": voteAnswers[5]
                                            };
                                            votes.push(vote);
                                            var percentRetrieved = parseInt((votes.length / totalTokenVoters * 100) + .5);
                                            pb.value(percentRetrieved);

                                            if (votes.length == totalVoters) {
                                                $("#dataretrievalStatus").text("Compiling Results");
                                                console.log(votes);
                                                CompileResults(votes,"1");
                                            } else {
                                                console.log("false");
                                            }
                                        });
                                    }
                                });
                            });
                            //$("#ddlMeetingList").kendoDropDownList({

                            //});
                        } else {
                            CompileResults("","0");
                        }
                    };

                    function CompileResults(v,recompile) {
                        var serviceURL = '/api/_GetCompletedQuestions_Realtime';

                        if (recompile == "0") {
                            v = [];
                            var vote = {
                                "index": "",
                                "senderAddress": "",
                                "sessionId": "",
                                "voteSelections": "",
                                "blockNumber": "",
                                "balance": ""
                            };
                            v.push(vote);
                        }

                        $.ajax({
                            type: "POST",
                            url: serviceURL,
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            data: JSON.stringify(v),
                            success: function (data, status) {
                                console.log("processed votes = " + data);

                                $("#dgCompletedProposals").kendoGrid({
                                    dataSource: {
                                        type: "json",
                                        data: data
                                    },
                                    selectable: "single",
                                    change: function (arg) {
                                        var selected = $.map(this.select(), function (item) {
                                            return $(item).text();
                                        });

                                        var quid = selected[0].split('|')[0].trim();
                                        var UserType = "@ViewBag.UserType";

                                        $(location).attr("href", "/Observer/en/QuestionRealtime/" + quid + "|" + UserType);

                                    },
                                    rowTemplate: kendo.template($("#rowTemplate").html()),
                                    altRowTemplate: kendo.template($("#altRowTemplate").html())
                                });



                                ////
                                for (var x = 0; x < data.length; x++) {
                                    var serviceURL1 = '/api/_GetAnswerInformation_Realtime/' + data[x].quid;

                                    $.ajax({
                                        type: "GET",
                                        url: serviceURL1,
                                        data: { quid: data[x].quid },
                                        contentType: "application/json; charset=utf-8",
                                        dataType: "json",
                                        success: function (data, status) {

                                            dataSource = new kendo.data.DataSource({
                                                data: data.PieChartData,
                                                schema: {
                                                    model: {
                                                        fields: {
                                                            value: "value"
                                                        }
                                                    }
                                                }
                                            });

                                            $("#answerPieChart_" + data.PieChartData[0].quid).kendoChart({
                                                dataSource: dataSource,
                                                legend: {
                                                    visible: false
                                                },
                                                seriesDefaults: {
                                                    labels: {
                                                        visible: false,
                                                        background: "transparent",
                                                        template: "#= getAnsText(category) # - #= kendo.format('{0:P}', percentage)#"
                                                    }
                                                },
                                                tooltip: {
                                                    visible: true,
                                                    template: "#= getAnsText(category) # - #= kendo.format('{0:P}', percentage)#"
                                                },
                                                series: [{
                                                    type: "pie",
                                                    field: "value",
                                                    categoryField: "category"
                                                }]
                                            });


                                        },
                                        error: errorFunc
                                    });
                                }
                                ////
                                myWindow.data("kendoWindow").close();
                            },
                            error: errorFunc
                        });



                    }
                           
                    function successFunc(data, status) {


                    }

                    function errorFunc() {
                        alert('error');
                    }

                    function getAnsId(value) {
                        return value.split(')')[0];
                    }

                    function getAnsText(value) {
                        return value.split(')')[1];
                    }

                </script>
                <style>
                    .box {
                        width: 130px;
                        height: 50px;
                        border: 1px solid black;
                        position: relative;
                        text-align: center;
                        background: #ccc;
                        vertical-align: middle;
                        display: table-cell;
                        color: black;
                    }

                    .details {
                        width: 600px;
                    }

                    .voteresult {
                        width: 190px;
                    }

                    .employeeID {
                        width: 190px;
                    }



                    .k-grid td {
                        padding: 20px;
                        border-bottom-width: 1px;
                        border-bottom-style: solid;
                        border-bottom-color: black;
                    }

                    .k-grid-header {
                        height: 0px;
                    }

                    .k-grid table {
                        width: auto;
                    }

                    .k-grid .k-alt td {
                    }
                </style>
            </div>
            <div id="answerPieChart" style="width: 250px; height: 250px;"></div>
        </div>
    </div>
</div>
@* All initialization scripts are rendered to the bottom of the page, see _Layout.cshtml *@
@section scripts {
    @Html.Kendo().DeferredScripts()
}
